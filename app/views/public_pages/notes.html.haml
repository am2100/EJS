

%h2 Notes
%ul
  %li
    %h3 Chapter 1: Basic Javascript. Values Variables &amp; Control Flow
    %ul
      %li
        %h4 Expressions &amp; Statements
        %ul
          %li
            A piece of code that produces a value is called an 
            %em
              expression
              \.
          %li
            Every value that is written directly (e.g 22 or "banana") is an expression.
          %li
            An expression between parentheses is an expression.
          %li
            A binary operator applied to two expressions or a unary operator applied to one, are also expressions.
          %li
            An expression can be content to simply produce a value, but a statement changes the world. A statement might send something to print, or change the internal state of a program in a way that will affect the statements that come after it. These changes are called side-effects.
          %li
            Most statements are terminated with a semi-colon.
          %li
            The simplest kind of statement is an expression with a semi-colon after it (e.g. 1;)
      %li
        %h4 The Environment
        %ul
          %li
            The collection of variables and their values that exist at a given time is called the 
            %em
              environment
            \.
          %li
            When a program starts up, this environment is not empty. It always contains a number of standard variables. When your browser loads a page, it creates a new environment and attaches these standard values to it. The variables created and modified by programs on that page survive until the browser goes to a new page.
  %li
    %h3 Chapter 2: Functions
    %ul
      %li
        %h4 Nested Scope
        %ul
          %li
            Functions defined inside other functions can refer to the local variables in their parent function, functions defined inside those inner functions can refer to variables in both their parent and their grandparent functions, and so on.
          %li
            Everything in Javascript is a value including functions. This means that the names of defined functions can be used like normal variables, and their content can be passed around and used in bigger expressions.
          %li
            Anonymous functions can be used to contain functionality that need not be named, and that is possibly only for short term use. Notable examples include Closures and Currying (The technique of transforming a function that takes multiple arguments in such a way that it can be called as a chain of functions each with a single argument).
        %li
          %h4 Closure: What happens to local variables when the function call that created them is no longer on the stack?
          %ul
            %li
              
